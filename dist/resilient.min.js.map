{
  "version": 3,
  "sources": ["../src/shared.js", "../src/datastar.js", "../src/retryer.js", "../src/interceptor.js"],
  "sourcesContent": ["/**\n * A symbol key to access retryer sensitive methods.\n *\n * @warning If this key is used outside this library, it is at the user's own risk.\n * @constant {symbol}\n */\nexport const RETRYER_BYPASS_KEY = Symbol(\"unsafe\");\n\n/**\n * WeakMap that associates HTML elements with their Retryer instances.\n * Uses WeakMap to allow garbage collection when elements are removed from DOM.\n *\n * @type {WeakMap<HTMLElement, Retryer>}\n */\nexport const ElementIndex = new WeakMap();\n\n/**\n * Map that tracks fetch IDs to their associated elements.\n * Used by the Datastar plugin to correlate fetch requests with their originating elements.\n *\n * @type {Map<string, HTMLElement>}\n */\nexport const FetchIdToElement = new Map();\n\n/**\n * Event name fired when a reconnect attempt is initiated.\n * Dispatched before attempting to establish a connection.\n *\n * @constant {string}\n */\nexport const CONNECT_EVENT = \"connect\";\n\n/**\n * Event name fired when a connection is successfully established.\n * Indicates the SSE stream is ready and receiving data.\n *\n * @constant {string}\n */\nexport const CONNECTED_EVENT = \"connected\";\n\n/**\n * Event name fired when a connection is lost or disconnected.\n * Triggers automatic reconnection logic via the Retryer.\n *\n * @constant {string}\n */\nexport const DISCONNECTED_EVENT = \"disconnected\";\n\nexport class Logger {\n  constructor(enabled = false) {\n    this.enabled = enabled;\n  }\n\n  info(...args) {\n    if (this.enabled) console.info(...args);\n  }\n\n  warn(...args) {\n    if (this.enabled) console.warn(...args);\n  }\n\n  error(...args) {\n    console.error(...args);\n  }\n}\n\n/**\n * Parser and utility class for HTTP Content-Type headers.\n * Parses media types and parameters from Content-Type header strings.\n *\n * @example\n * const ct = new ContentType(\"text/html; charset=utf-8\");\n * ct.isHTML // true\n * ct.charset // \"utf-8\"\n */\nexport class ContentType {\n  /**\n   * Creates a new ContentType parser instance.\n   *\n   * @param {string} contentTypeString - The Content-Type header value to parse\n   */\n  constructor(contentTypeString) {\n    this.raw = contentTypeString || \"\";\n    this._parsed = this._parse();\n  }\n\n  /**\n   * Internal parser that extracts media type and parameters.\n   *\n   * @private\n   * @returns {{mediaType: string, params: Object}} Parsed media type and parameters\n   */\n  _parse() {\n    // Split by semicolon to separate media type from parameters\n    const parts = this.raw.split(\";\").map((p) => p.trim());\n    const mediaType = parts[0].toLowerCase();\n\n    // Parse parameters (e.g., charset=utf-8, boundary=...)\n    const params = {};\n    for (let i = 1; i < parts.length; i++) {\n      const [key, value] = parts[i].split(\"=\").map((s) => s.trim());\n      if (key && value) {\n        params[key.toLowerCase()] = value.replace(/^[\"']|[\"']$/g, \"\");\n      }\n    }\n\n    return { mediaType, params };\n  }\n\n  /**\n   * Gets the main type (e.g., \"text\" from \"text/html\").\n   *\n   * @returns {string} The main type\n   */\n  get type() {\n    return this._parsed.mediaType.split(\"/\")[0];\n  }\n\n  /**\n   * Gets the subtype (e.g., \"html\" from \"text/html\").\n   *\n   * @returns {string} The subtype\n   */\n  get subtype() {\n    return this._parsed.mediaType.split(\"/\")[1];\n  }\n\n  /**\n   * Gets all parsed parameters as an object.\n   *\n   * @returns {Object} Parameters object (e.g., {charset: \"utf-8\"})\n   */\n  get params() {\n    return this._parsed.params;\n  }\n\n  /**\n   * Checks if the content type is Server-Sent Events (text/event-stream).\n   *\n   * @returns {boolean} True if SSE\n   */\n  get isSSE() {\n    return this._parsed.mediaType === \"text/event-stream\";\n  }\n\n  /**\n   * Checks if the content type is JSON or a JSON variant (+json).\n   *\n   * @returns {boolean} True if JSON\n   */\n  get isJSON() {\n    return (\n      this._parsed.mediaType === \"application/json\" ||\n      this._parsed.mediaType.endsWith(\"+json\")\n    );\n  }\n\n  /**\n   * Checks if the content type is HTML.\n   *\n   * @returns {boolean} True if HTML\n   */\n  get isHTML() {\n    return this._parsed.mediaType === \"text/html\";\n  }\n\n  /**\n   * Checks if the content type is XML or an XML variant (+xml).\n   *\n   * @returns {boolean} True if XML\n   */\n  get isXML() {\n    return (\n      this._parsed.mediaType === \"application/xml\" ||\n      this._parsed.mediaType === \"text/xml\" ||\n      this._parsed.mediaType.endsWith(\"+xml\")\n    );\n  }\n\n  /**\n   * Checks if the main type is \"text\".\n   *\n   * @returns {boolean} True if text type\n   */\n  get isText() {\n    return this.type === \"text\";\n  }\n\n  /**\n   * Checks if the main type is \"multipart\".\n   *\n   * @returns {boolean} True if multipart type\n   */\n  get isMultipart() {\n    return this.type === \"multipart\";\n  }\n\n  /**\n   * Checks if the content type is multipart/form-data.\n   *\n   * @returns {boolean} True if form data\n   */\n  get isFormData() {\n    return this._parsed.mediaType === \"multipart/form-data\";\n  }\n\n  /**\n   * Checks if the content type is application/x-www-form-urlencoded.\n   *\n   * @returns {boolean} True if URL encoded form\n   */\n  get isFormURLEncoded() {\n    return this._parsed.mediaType === \"application/x-www-form-urlencoded\";\n  }\n\n  /**\n   * Checks if the content type is binary (not text, JSON, XML, or HTML).\n   *\n   * @returns {boolean} True if binary\n   */\n  get isBinary() {\n    return !this.isText && !this.isJSON && !this.isXML && !this.isHTML;\n  }\n\n  /**\n   * Gets the charset parameter, defaults to \"utf-8\" if not specified.\n   *\n   * @returns {string} The charset value\n   */\n  get charset() {\n    return this.params.charset || \"utf-8\";\n  }\n\n  /**\n   * Checks if the media type exactly matches the given type.\n   *\n   * @param {string} type - The media type to compare (case-insensitive)\n   * @returns {boolean} True if exact match\n   */\n  is(type) {\n    return this._parsed.mediaType === type.toLowerCase();\n  }\n\n  /**\n   * Checks if the media type matches a pattern.\n   * Supports RegExp or wildcard strings like \"text/*\" or \"* /json\".\n   *\n   * @param {string|RegExp} pattern - Pattern to match against\n   * @returns {boolean} True if matches pattern\n   */\n  matches(pattern) {\n    if (pattern instanceof RegExp) {\n      return pattern.test(this._parsed.mediaType);\n    }\n    // Support wildcards like \"text/*\" or \"*/json\"\n    const regex = new RegExp(\"^\" + pattern.replace(\"*\", \".*\") + \"$\");\n    return regex.test(this._parsed.mediaType);\n  }\n\n  /**\n   * Returns the original Content-Type header string.\n   *\n   * @returns {string} The raw Content-Type header value\n   */\n  toString() {\n    return this.raw;\n  }\n}\n", "/**\n * =============================================================================\n * IMPORTANT NOTICE: Undocumented Datastar API Usage\n * =============================================================================\n *\n * This file contains code that relies on UNDOCUMENTED and INTERNAL Datastar\n * mechanisms, including but not limited to:\n *\n *   - Dispatching `datastar-signal-patch` custom events\n *   - Creating custom Datastar watcher plugins\n *   - Intercepting and wrapping Datastar action functions (ctx.actions)\n *   - Manipulating Datastar request headers and arguments\n *   - Using plugin context APIs that may be internal-only\n *\n * \u26A0\uFE0F THESE ARE NOT PART OF DATASTAR'S PUBLIC API \u26A0\uFE0F\n *\n * This code works by hooking into Datastar's internals which may change or be\n * removed at any time in future versions without notice or backwards\n * compatibility. Breaking changes are likely when upgrading Datastar.\n *\n * COMPATIBILITY & VERSION REQUIREMENTS:\n *\n *   - Compatible Datastar Version: v1.0.0-RC.5\n *   - DO NOT upgrade Datastar without verifying compatibility\n *   - The maintainer will make efforts to keep this code compatible with new\n *     Datastar versions, but updates may lag behind Datastar releases\n *   - Only use Datastar versions explicitly marked as compatible\n *\n * If Datastar provides official public APIs for these capabilities in the\n * future, this code likely wil be refactored to use those instead.\n *\n * Community contributions, pull requests, and compatibility updates for new\n * Datastar versions are more than welcome and greatly appreciated!\n *\n * =============================================================================\n */\n\nimport { ElementIndex, FetchIdToElement } from \"./shared.js\";\nimport { InterceptorLogger } from \"./interceptor.js\";\n\nexport const DATASTAR_DEBUG_SIGNAL_EVENT = \"debug-datastar-signal\";\n\nexport function FetchReturn(response, transformStream) {\n  // Create new response with transformed body\n  // IMPORTANT: This is compatible with Datastar's fetch handling because:\n  // 1. For SSE streams: Datastar uses response.body directly\n  //    - Our transformed stream works perfectly with getBytes(response.body)\n  // 2. For HTML/JSON: Datastar calls response.text()\n  //    - Response.text() works on our transformed ReadableStream\n  // 3. Response object properly exposes the transformed body through both\n  //    response.body (as ReadableStream) and response.text() (as Promise<string>)\n  const transformedBody = response.body.pipeThrough(transformStream);\n\n  return new Response(transformedBody, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: new Headers(response.headers),\n  });\n}\n\nconst FetchIdHeader = \"X-Fetch-Id\";\n\n/**\n * Dispatches a custom event to update Datastar signals.\n *\n * @param {object} signals - An object where keys are signal names and values are the new signal values.\n */\nexport function SendSignal(signal) {\n  // The detail object simulates the structure of a datastar-patch-signals event.\n  const detail = {\n    type: \"datastar-patch-signals\",\n    argsRaw: {\n      signals: JSON.stringify(signal),\n    },\n  };\n\n  // Dispatch a 'datastar-fetch' event to be caught by the PatchSignals watcher.\n  document.dispatchEvent(new CustomEvent(\"datastar-fetch\", { detail }));\n}\n\n/**\n * Connection state values for Datastar signals.\n * Used with Retryer's enableDatastarSignals option.\n *\n * @constant\n * @type {{CONNECTING: string, CONNECTED: string, DISCONNECTED: string}}\n */\nexport const SIGNALS_CONNECTION_STATES = {\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n};\n\n// counter for generating unique fetch IDs\nlet fetchCounter = 0;\n\nconst DatastarPlugin = {\n  type: \"watcher\",\n  name: \"element-fetch-mapper\",\n  onGlobalInit: (ctx) => {\n    // inject X-Fetch-Id header into all \"ctx.actions\".\n    // these will be picked up by the fetch interceptor\n    // so we can track which fetch belongs to which element.\n    //\n    // this mapping bridges the gap between Datastar actions (which have element context)\n    // and window.fetch (which doesnt), allowing us to retrieve the Retryer instance.\n\n    for (const actionName in ctx.actions) {\n      const original = ctx.actions[actionName].fn;\n      // this wrapper executes on EVERY request (e.g., every @get, @post call)\n      ctx.actions[actionName].fn = (actionCtx, url, args = {}) => {\n        // only modify elements with a Retryer instance\n        const hasRetryer = !!ElementIndex.get(actionCtx.el);\n        if (!hasRetryer) {\n          return original(actionCtx, url, args);\n        }\n\n        const fetchId = `${++fetchCounter}`;\n        FetchIdToElement.set(fetchId, actionCtx.el);\n        // cleanup fallback: normally deleted immediately at when fetch executes.\n        // this 5s timeout only fires if fetch never gets called (e.g., error before fetch starts).\n        setTimeout(() => FetchIdToElement.delete(fetchId), 5000);\n        args.headers = { ...args.headers, [FetchIdHeader]: fetchId };\n\n        // disable datastar built-in retry mechanism since we handle retries via the Retryer.\n        // setting retryMaxCount to 0 prevents any retries, but Datastar will still reject\n        // with a FetchFailed error wrapping \"Max retries reached.\"\n        // we catch and suppress this error below to avoid console spam.\n        args.retryMaxCount = 0;\n\n        return original(actionCtx, url, args).catch((error) => {\n          // Suppress Datastar's FetchFailed errors since our Retryer handles reconnection.\n          if (error?.message?.startsWith(\"FetchFailed\")) {\n            InterceptorLogger.info(\n              `[Interceptor] Suppressed Datastar FetchFailed error, Retryer will handle reconnection for:`,\n              actionCtx.el\n            );\n            return; // resolve with undefined\n          }\n          throw error; // re-throw other errors\n        });\n      };\n    }\n  },\n};\n\nexport function LoadDatastarPlugin(load) {\n  try {\n    load(DatastarPlugin);\n  } catch (e) {\n    console.error(\"[Interceptor] Failed to load DatastarPlugin\", e);\n  }\n}\n", "import {\n  RETRYER_BYPASS_KEY,\n  CONNECT_EVENT,\n  CONNECTED_EVENT,\n  DISCONNECTED_EVENT,\n  Logger,\n  ElementIndex,\n} from \"./shared.js\";\n\nimport { SendSignal, SIGNALS_CONNECTION_STATES } from \"./datastar.js\";\n\n/**\n * Creates a configurable exponential backoff calculator function\n * @param {Object} options - Backoff configuration options\n * @param {number} [options.maxInitialAttempts=3] - Maximum number of quick retries for initial connection\n * @param {number} [options.initialDelayMs=20] - Initial retry delay in milliseconds\n * @param {number} [options.maxDelayMs=30000] - Maximum delay cap in milliseconds\n * @param {number} [options.baseDelayMs=1000] - Base delay multiplier in milliseconds\n * @param {number} [options.baseMultiplier=2] - Base for exponential calculation\n * @returns {Function} Backoff calculator function\n */\nexport function SimpleBackoffCalculator({\n  maxInitialAttempts = 3,\n  initialDelayMs = 20,\n  maxDelayMs = 30000,\n  baseDelayMs = 1000,\n  baseMultiplier = 2,\n} = {}) {\n  let initialRetryCount = 0;\n\n  return function (retryCount, _, reconnections) {\n    // Handle initial connection attempts\n    if (reconnections === 0) {\n      initialRetryCount++;\n      if (maxInitialAttempts > 0 && initialRetryCount > maxInitialAttempts) {\n        return false;\n      }\n      return initialDelayMs;\n    }\n\n    // Calculate exponential backoff for reconnections\n    return Math.min(\n      maxDelayMs,\n      baseDelayMs * Math.pow(baseMultiplier, retryCount)\n    );\n  };\n}\n\n/**\n * Manages automatic reconnection for SSE connections with configurable backoff.\n * Tracks fetch lifecycle events and handles retry logic when connections fail.\n *\n * @param {HTMLElement} element - The element to attach the retryer to\n * @param {Object} [options={}] - Configuration options\n * @param {boolean} [options.debug=false] - Enable console logging, disabled by default.\n * @param {Function} [options.backoffCalculator] - Function that takes (retryCount, lastStartTime, reconnections) and returns delay in ms or false to stop retrying. retryCount is consecutive attempts, lastStartTime is timestamp of last attempt, reconnections is total successful connections. Return false to stop reconnection attempts entirely. Default uses exponential backoff capped at 30s, with max 3 attempts for initial connection (reconnections === 0).\n * @param {Function} [options.isFailedRequest] - Function that takes (from fetch) response and returns boolean. Default is response.status >= 400 (https://data-star.dev/essays/im_a_teapot/)\n * @param {number} [options.inactivityTimeoutMs=0] - Time in ms to consider connection inactive if no data received, if value is 0 or not set, inactivity is not checked. Default is 0.\n * @param {boolean} [options.enableConnectionEvents=false] - Enable dispatching of CONNECTED_EVENT and DISCONNECTED_EVENT. Default is false. Note: CONNECT_EVENT is always dispatched regardless of this setting.\n * @param {string} [options.enableDatastarSignals=\"\"] - String key for Datastar signals. If set, sends signals with this key and values: \"connecting\", \"connected\", \"disconnected\". Default is empty (disabled).\n * @param {Function|null} [options.requestInterceptor=null] - Function to modify fetch requests before they execute. Takes ({ resource, init }) and returns { resource, init }. Resource can be string, URL, or Request object. Init is the optional RequestInit. Default is null (no modification).\n * @param {Function|null} [options.responseInterceptor=null] - Function to modify Response object before it's returned to Datastar. Takes ({ url, response }) and returns modified Response. Useful for modifying headers, status, etc. Default is null (no modification).\n * @param {Function|null} [options.dataInterceptor=null] - Function to modify streaming response data chunks. Takes ({ url, response, chunk }) and returns modified chunk. Chunk is a Uint8Array containing binary data. Called for each chunk of the response body. Default is null (no modification).\n */\nexport class Retryer {\n  #logger;\n\n  #lastStartTime;\n  #retryCount;\n  #retryTimer;\n  #connected;\n  #lastSSETime;\n  #abortController;\n  #reconnections;\n  #inactivityCheckInterval;\n\n  constructor(element, options = {}) {\n    // remove null and undefined values from options\n    options = Object.fromEntries(\n      Object.entries(options).filter(([_, value]) => value != null)\n    );\n\n    const defaults = {\n      debug: false,\n      backoffCalculator: SimpleBackoffCalculator(),\n      isFailedRequest: function (response) {\n        // https://data-star.dev/essays/im_a_teapot/\n        return response.status >= 400;\n      },\n      inactivityTimeoutMs: 0,\n      enableConnectionEvents: false,\n      enableDatastarSignals: \"\",\n      requestInterceptor: null, // function ({ resource, init }) => ({ resource, init })\n      responseInterceptor: null, // function ({ url, response }) => response\n      dataInterceptor: null, // function ({ url, response, chunk }) => chunk\n    };\n\n    this.element = element;\n    this.options = { ...defaults, ...options };\n    this.#logger = new Logger(this.options.debug);\n\n    this.#lastStartTime = null;\n    this.#retryCount = 0;\n    this.#retryTimer = null;\n    this.#connected = false;\n    this.#lastSSETime = null;\n    this.#abortController = null;\n    this.#reconnections = -1; // starts at -1, first successful connection sets to 0\n    this.#inactivityCheckInterval = null;\n\n    this.init();\n  }\n\n  init() {\n    ElementIndex.set(this.element, this);\n    this.notifyRequestStopped(RETRYER_BYPASS_KEY, true);\n  }\n\n  get lastStartTime() {\n    return this.#lastStartTime;\n  }\n\n  get connected() {\n    return this.#connected;\n  }\n\n  get reconnections() {\n    return this.#reconnections;\n  }\n\n  /**\n   * Sets the abort controller for the current request.\n   * Used by the fetch interceptor to enable request cancellation.\n   */\n  setAbortController(key, controller) {\n    this.#checkKey(key);\n\n    this.#abortController = controller;\n  }\n\n  /**\n   * Tracks SSE activity by updating the last activity timestamp.\n   * The automatic inactivity monitor will handle timeout detection.\n   */\n  trackSSE(key) {\n    this.#checkKey(key);\n\n    if (this.options?.inactivityTimeoutMs > 0) {\n      this.#lastSSETime = Date.now();\n    }\n  }\n\n  /**\n   * Starts automatic inactivity monitoring with periodic checks.\n   * Called when connection is established to auto-detect inactivity.\n   */\n  #startInactivityMonitor() {\n    if (this.options?.inactivityTimeoutMs <= 0) return;\n\n    this.#stopInactivityMonitor();\n\n    const checkIntervalMs = Math.min(\n      1000,\n      this.options.inactivityTimeoutMs / 2\n    );\n\n    this.#inactivityCheckInterval = setInterval(() => {\n      this.#logger.info(\n        `[Retryer] Inactivity monitor check, last SSE at: ${this.#lastSSETime}`\n      );\n\n      if (this.#lastSSETime === null) return;\n\n      const elapsed = Date.now() - this.#lastSSETime;\n      if (elapsed > this.options.inactivityTimeoutMs) {\n        this.#logger.warn(\n          `[Retryer] Auto-detected inactivity timeout (${this.options.inactivityTimeoutMs}ms), after ${elapsed}ms of no data, aborting connection for element:`,\n          this.element\n        );\n\n        const controller = this.#abortController;\n        this.#abortController = null; // clear before abort to prevent reuse\n        controller?.abort(\"[Retryer] Auto-aborted due to inactivity timeout\");\n\n        this.notifyRequestStopped(RETRYER_BYPASS_KEY);\n      }\n    }, checkIntervalMs);\n\n    this.#logger.info(\n      `[Retryer] Started inactivity monitor (checking every ${checkIntervalMs}ms) for element:`,\n      this.element\n    );\n  }\n\n  /**\n   * Stops the automatic inactivity monitoring interval.\n   */\n  #stopInactivityMonitor() {\n    if (this.#inactivityCheckInterval) {\n      clearInterval(this.#inactivityCheckInterval);\n      this.#inactivityCheckInterval = null;\n      this.#logger.info(\n        \"[Retryer] Stopped inactivity monitor for element:\",\n        this.element\n      );\n    }\n  }\n\n  #checkKey(key) {\n    if (key !== RETRYER_BYPASS_KEY) {\n      throw new Error(\n        \"[Retryer] Sensitive method called without RETRYER_BYPASS_KEY\"\n      );\n    }\n  }\n\n  /**\n   * Notifies the retryer that a fetch request has started.\n   * Called by the fetch interceptor when initiating a network request.\n   */\n  notifyRequestStarted(key) {\n    this.#checkKey(key);\n    this.#lastSSETime = Date.now();\n    this.#lastStartTime = Date.now();\n    this.#clearRetryTimer();\n    this.#logger.info(\"[Retryer] request started for element:\", this.element);\n    this.#startInactivityMonitor(); // Start automatic inactivity monitoring\n  }\n\n  /**\n   * Determines if a response should be treated as a failed request.\n   * Delegates to the user-configured isFailedRequest option.\n   */\n  isFailedRequest(key, response) {\n    this.#checkKey(key);\n    return this.options.isFailedRequest(response);\n  }\n\n  /**\n   * Notifies the retryer that a connection has been successfully established.\n   * Resets retry counters, dispatches events, and updates connection state.\n   */\n  notifyRequestConnected(key) {\n    this.#checkKey(key);\n\n    this.#connected = true;\n    this.#retryCount = 0;\n    this.#reconnections++;\n    this.#clearRetryTimer();\n    if (this.options.enableConnectionEvents) {\n      this.element.dispatchEvent(new Event(CONNECTED_EVENT));\n    }\n    if (this.options.enableDatastarSignals) {\n      SendSignal({\n        [this.options.enableDatastarSignals]:\n          SIGNALS_CONNECTION_STATES.CONNECTED,\n      });\n    }\n    this.#logger.info(\"[Retryer] request connected for element:\", this.element);\n  }\n\n  /**\n   * Notifies the retryer that a request has stopped or disconnected.\n   * Clears connection state, dispatches events, and optionally schedules reconnection.\n   */\n  notifyRequestStopped(key, retry = true) {\n    this.#checkKey(key);\n\n    // there is no state correlation with this.#connected to this method call,\n    // the real connected state is managed externally.\n    // (by the interceptor ot even network failures)\n    //\n    // this.#connected is just a flag to:\n    // - provide some protection against CONNECT_EVENT calls.\n    // - provide to the user a reference of the last known state (via isConnected())\n\n    this.#abortController = null; // clear to prevent further aborts\n    this.#connected = false;\n    this.#lastSSETime = null;\n    this.#stopInactivityMonitor();\n\n    if (this.options.enableConnectionEvents) {\n      this.element.dispatchEvent(new Event(DISCONNECTED_EVENT));\n    }\n    if (this.options.enableDatastarSignals) {\n      SendSignal({\n        [this.options.enableDatastarSignals]:\n          SIGNALS_CONNECTION_STATES.DISCONNECTED,\n      });\n    }\n    if (this.#reconnections > 0) {\n      this.#logger.info(\"[Retryer] request stopped for element:\", this.element);\n    }\n    if (retry) this.#scheduleReconnect();\n  }\n\n  #scheduleReconnect() {\n    // ignore if already retrying\n    if (this.#retryTimer) {\n      this.#logger.info(\n        \"[Retryer] reconnect already scheduled, skipping for element:\",\n        this.element\n      );\n      return;\n    }\n\n    // check if element is still in DOM\n    if (!document.body.contains(this.element)) {\n      this.#logger.warn(\n        \"[Retryer] element removed from DOM, not scheduling reconnect\"\n      );\n      return;\n    }\n\n    this.#retryCount++;\n\n    // schedule reconnect\n    const delayMs = this.options.backoffCalculator(\n      this.#retryCount,\n      this.#lastStartTime,\n      this.#reconnections\n    );\n\n    if (delayMs === false) {\n      this.#logger.error(\n        `[Retryer] retries exhausted, not scheduling reconnect for element:`,\n        this.element\n      );\n      this.notifyRequestStopped(RETRYER_BYPASS_KEY, false);\n      return;\n    }\n\n    this.#logger.warn(\n      `[Retryer] scheduling reconnect in ${delayMs}ms (retry #${\n        this.#retryCount\n      }) for element:`,\n      this.element\n    );\n\n    this.#retryTimer = setTimeout(() => {\n      this.#logger.info(\n        `[Retryer] executing scheduled reconnect (retry #${\n          this.#retryCount\n        }) for element:`,\n        this.element\n      );\n      this.#retryTimer = null;\n      this.#fireConnect();\n    }, delayMs);\n  }\n\n  #fireConnect() {\n    if (this.#connected) {\n      this.#logger.info(\n        \"[Retryer] already connected, not firing connect for element:\",\n        this.element\n      );\n      return;\n    }\n    this.element.dispatchEvent(new Event(CONNECT_EVENT));\n    if (this.options.enableDatastarSignals) {\n      SendSignal({\n        [this.options.enableDatastarSignals]:\n          SIGNALS_CONNECTION_STATES.CONNECTING,\n      });\n    }\n  }\n\n  // from here down: cleanup\n\n  #clearRetryTimer() {\n    if (this.#retryTimer) {\n      clearTimeout(this.#retryTimer);\n      this.#retryTimer = null;\n    }\n  }\n\n  /**\n   * Cleans up the retryer instance and removes it from the element index.\n   * Call this when the element is removed or the retryer is no longer needed.\n   */\n  destroy() {\n    this.#clearRetryTimer();\n    this.#stopInactivityMonitor();\n    ElementIndex.delete(this.element);\n    this.#logger.info(\"[Retryer] Destroyed for element:\", this.element);\n  }\n}\n\nwindow.Resilient = {\n  Retryer: Retryer,\n  GetRetryer: function (element) {\n    return ElementIndex.get(element);\n  },\n  SimpleBackoffCalculator: SimpleBackoffCalculator,\n};\n", "import {\n  RETRYER_BYPASS_KEY,\n  Logger,\n  ElementIndex,\n  FetchIdToElement,\n} from \"./shared.js\";\nimport { Retryer } from \"./retryer.js\";\nimport { FetchReturn } from \"./datastar.js\";\n\nconst FetchIdHeader = \"X-Fetch-Id\";\n\n/**\n * Logger instance for the fetch interceptor.\n * Use ToggleInterceptorLogging() to control output.\n *\n * @type {Logger}\n */\nexport const InterceptorLogger = new Logger(false);\n\n/**\n * Enables or disables console logging for the fetch interceptor.\n * Logs fetch lifecycle events, errors, and debug information.\n *\n * @param {boolean} enabled - true to enable logging, false to disable\n *\n * @example\n * ToggleInterceptorLogging(true);  // enable logging\n * ToggleInterceptorLogging(false); // disable logging\n */\nexport function ToggleInterceptorLogging(enabled) {\n  InterceptorLogger.enabled = enabled;\n}\n\n/**\n * Creates a TransformStream to process the response body stream.\n * Applies the dataInterceptor if configured, then enqueues chunks to the stream.\n *\n * @param {Object} params\n * @param {string} params.url\n * @param {Response} params.response\n * @param {Retryer|null} params.retryer\n * @returns {TransformStream} A TransformStream that processes chunks with optional data modification\n */\nconst fetchStreamTransformer = function ({ url, response, retryer }) {\n  return new TransformStream({\n    async transform(chunk, controller) {\n      retryer?.trackSSE(RETRYER_BYPASS_KEY);\n\n      try {\n        // allow user to modify received data\n        if (retryer?.options.dataInterceptor) {\n          chunk =\n            retryer.options.dataInterceptor({ url, response, chunk }) ?? chunk;\n        }\n\n        // return data to stream\n        controller.enqueue(chunk);\n      } catch (e) {\n        InterceptorLogger.error(\n          \"[Interceptor] Error in stream transformer:\",\n          e\n        );\n        controller.error(e);\n      }\n    },\n  });\n};\n\nconst originalFetch = window.fetch;\n\n/**\n * Intercepts all fetch requests to incorporate retry logic and request/response modification.\n * Only requests associated with a Retryer instance are affected.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\n *\n * @param {string | URL | Request} resource - The URL or Request object to fetch\n * @param {RequestInit} [init] - Fetch options (optional)\n * @returns {Promise<Response>} The fetch response with (optionally) transformed response\n */\nwindow.fetch = async function (resource, init) {\n  const { retryer } = getRetryer(resource, init);\n\n  if (!retryer) {\n    return originalFetch(resource, init);\n  }\n\n  if (retryer.options.requestInterceptor) {\n    ({ resource, init } = retryer.options.requestInterceptor({\n      resource,\n      init,\n    }));\n  }\n\n  const isRequestObject = resource instanceof Request;\n  const url = isRequestObject ? resource.url : resource;\n\n  // create a new abort controller to manage fetch abortion\n  const abortController = new AbortController();\n\n  // if there is an original signal, listen to it and forward the abort\n  if (init?.signal) {\n    init.signal.aborted\n      ? abortController.abort(init.signal.reason)\n      : init.signal.addEventListener(\n          \"abort\",\n          () => abortController.abort(init.signal.reason),\n          { once: true }\n        );\n  }\n\n  const newOptions = { ...init, signal: abortController.signal };\n\n  let response;\n\n  retryer.notifyRequestStarted(RETRYER_BYPASS_KEY);\n  retryer.setAbortController(RETRYER_BYPASS_KEY, abortController);\n\n  try {\n    // Call originalFetch with the appropriate parameters\n    if (isRequestObject) {\n      // For Request objects, we may have recreated it with modifications\n      // Pass the (possibly new) Request object with merged options\n      response = await originalFetch(resource, newOptions);\n    } else {\n      // For url/options, pass them directly\n      response = await originalFetch(url, newOptions);\n    }\n\n    if (retryer.isFailedRequest(RETRYER_BYPASS_KEY, response)) {\n      // abort to let the server server know we are giving up on this request\n      abortController.abort(\n        \"[Interceptor] Fetch aborted by retryer: unexpected response\"\n      );\n\n      InterceptorLogger.warn(\n        `[Interceptor] Fetch aborted by retryer: unexpected response for ${url}`,\n        response\n      );\n\n      // throw to inform of failure\n      throw new Error(\n        \"[Interceptor] Fetch aborted by retryer: unexpected response\"\n      );\n    } else {\n      retryer.notifyRequestConnected(RETRYER_BYPASS_KEY);\n    }\n  } catch (e) {\n    retryer.notifyRequestStopped(RETRYER_BYPASS_KEY);\n    throw e;\n  }\n\n  InterceptorLogger.info(\n    `[Interceptor] fetch response: ${response.status} ${response.statusText} for ${url}`,\n    response\n  );\n\n  if (retryer.options.responseInterceptor) {\n    response =\n      retryer.options.responseInterceptor({ url, response }) ?? response;\n  }\n\n  if (!response.body) {\n    InterceptorLogger.info(\n      \"[Interceptor] response has no body, skipping transformation, for url:\",\n      url\n    );\n\n    return response;\n  }\n\n  const transformStream = fetchStreamTransformer({\n    url,\n    response,\n    retryer,\n  });\n\n  return FetchReturn(response, transformStream);\n};\n\n/**\n * Extracts the Retryer instance from fetch parameters.\n * Handles both regular fetch(url, options) and fetch(Request, options) signatures.\n * Priority: init headers > Request headers\n *\n * @param {string | URL | Request} resource - The URL or Request object\n * @param {RequestInit} [init] - Optional fetch options\n * @returns {{ retryer: Retryer | null }}\n */\nfunction getRetryer(resource, init) {\n  // Determine if resource is Request object (for header extraction)\n  const isRequestObject = resource instanceof Request;\n\n  // Extract fetch ID from headers (priority: init headers > Request headers)\n  let fetchId = null;\n  let headersToClean = null;\n\n  // Check init headers first\n  if (init?.headers) {\n    fetchId =\n      init.headers instanceof Headers\n        ? init.headers.get(FetchIdHeader)\n        : init.headers?.[FetchIdHeader];\n\n    if (fetchId) {\n      headersToClean = init.headers;\n    }\n  }\n\n  // Check Request headers if not found in init\n  if (!fetchId && isRequestObject) {\n    fetchId = resource.headers.get(FetchIdHeader);\n    if (fetchId) {\n      // Request.headers is readonly, cannot clean it\n      headersToClean = null;\n    }\n  }\n\n  // If no fetch ID found, return null retryer\n  if (!fetchId) {\n    return { retryer: null };\n  }\n\n  // Remove FetchIdHeader from headers (if mutable)\n  if (headersToClean) {\n    if (headersToClean instanceof Headers) {\n      headersToClean.delete(FetchIdHeader);\n    } else if (typeof headersToClean === \"object\") {\n      delete headersToClean[FetchIdHeader];\n    }\n  }\n\n  // Find associated element\n  const element = FetchIdToElement.get(fetchId);\n\n  // Clean up FetchIdToElement map\n  FetchIdToElement.delete(fetchId);\n\n  // Validate element exists\n  if (!element) {\n    InterceptorLogger.error(\n      \"[Interceptor] No element found for fetchId:\",\n      fetchId\n    );\n    return { retryer: null };\n  }\n\n  // Validate element is still in DOM\n  if (!document.contains(element)) {\n    InterceptorLogger.error(\n      \"[Interceptor] Element for fetchId is no longer in DOM:\",\n      fetchId,\n      element\n    );\n    return { retryer: null };\n  }\n\n  // Find and validate retryer\n  const retryer = ElementIndex.get(element);\n  if (!retryer || !(retryer instanceof Retryer)) {\n    InterceptorLogger.error(\n      \"[Interceptor] No Retryer instance found for element:\",\n      element\n    );\n    return { retryer: null };\n  }\n\n  return { retryer };\n}\n"],
  "mappings": "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",
  "names": ["RETRYER_BYPASS_KEY", "ElementIndex", "FetchIdToElement", "CONNECT_EVENT", "CONNECTED_EVENT", "DISCONNECTED_EVENT", "Logger", "enabled", "args", "ContentType", "contentTypeString", "parts", "p", "mediaType", "params", "key", "value", "s", "type", "pattern", "FetchReturn", "response", "transformStream", "transformedBody", "FetchIdHeader", "SendSignal", "signal", "detail", "SIGNALS_CONNECTION_STATES", "fetchCounter", "DatastarPlugin", "ctx", "actionName", "original", "actionCtx", "url", "args", "ElementIndex", "fetchId", "FetchIdToElement", "error", "InterceptorLogger", "LoadDatastarPlugin", "load", "SimpleBackoffCalculator", "maxInitialAttempts", "initialDelayMs", "maxDelayMs", "baseDelayMs", "baseMultiplier", "initialRetryCount", "retryCount", "_", "reconnections", "_logger", "_lastStartTime", "_retryCount", "_retryTimer", "_connected", "_lastSSETime", "_abortController", "_reconnections", "_inactivityCheckInterval", "_Retryer_instances", "startInactivityMonitor_fn", "stopInactivityMonitor_fn", "checkKey_fn", "scheduleReconnect_fn", "fireConnect_fn", "clearRetryTimer_fn", "Retryer", "element", "options", "__privateAdd", "value", "defaults", "response", "__privateSet", "Logger", "ElementIndex", "RETRYER_BYPASS_KEY", "__privateGet", "key", "controller", "__privateMethod", "__privateWrapper", "CONNECTED_EVENT", "SendSignal", "SIGNALS_CONNECTION_STATES", "retry", "DISCONNECTED_EVENT", "checkIntervalMs", "elapsed", "delayMs", "CONNECT_EVENT", "FetchIdHeader", "InterceptorLogger", "Logger", "ToggleInterceptorLogging", "enabled", "fetchStreamTransformer", "url", "response", "retryer", "chunk", "controller", "RETRYER_BYPASS_KEY", "e", "originalFetch", "resource", "init", "getRetryer", "isRequestObject", "abortController", "newOptions", "transformStream", "FetchReturn", "fetchId", "headersToClean", "element", "FetchIdToElement", "ElementIndex", "Retryer"]
}
